{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AbiRepositoryConfigSchema": {
            "properties": {
                "directory": {
                    "description": "If specified, the ABI repository will recursively search this directory for ABI files",
                    "type": "string"
                },
                "fileExtension": {
                    "type": "string"
                },
                "fingerprintContracts": {
                    "description": "If enabled, the ABI repsitory will creates hashes of all function and event signatures of an ABI\n(the hash is the fingerprint) and match it against the EVM bytecode obtained from live smart contracts\nwe encounter.\n\nNOTE: disabling it is currently being ignored since non-fingerprint matching hasn't been implemented",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "BlockWatcherConfigSchema": {
            "properties": {
                "blocksMaxChunkSize": {
                    "description": "Max. number of blocks to fetch at once",
                    "type": "number"
                },
                "enabled": {
                    "description": "Specify `false` to disable the block watcher",
                    "type": "boolean"
                },
                "pollInterval": {
                    "description": "Interval in which to look for the latest block number (if not busy processing the backlog)",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "retryWaitTime": {
                    "anyOf": [
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "exponential-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "step": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "linear-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "description": "Wait time before retrying to fetch and process blocks after failure"
                },
                "startAt": {
                    "anyOf": [
                        {
                            "enum": [
                                "genesis",
                                "latest"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "If no checkpoint exists (yet), this specifies which block should be chosen as the starting point.\nSpecify a positive integer for an absolute block number or a negative integer to start at n blocks\nbefore the latest one. You can also specify \"genesis\" (block 0) or \"latest\" (currently latest block)."
                }
            },
            "type": "object"
        },
        "CheckpointConfigSchema": {
            "properties": {
                "filename": {
                    "description": "File path (relative to the current working directory) where the checkpoint file will be stored",
                    "type": "string"
                },
                "saveInterval": {
                    "description": "Maximum duration before saving updated checkpoint information to disk",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "ConsoleOutputConfig": {
            "properties": {
                "type": {
                    "enum": [
                        "console"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ContractInfoConfigSchema": {
            "properties": {
                "maxCacheEntries": {
                    "description": "Maximum number of contract info results to cache in memory. Set to 0 to disable the cache.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "DevNullOutputConfig": {
            "properties": {
                "type": {
                    "enum": [
                        "null"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EthereumClientConfigSchema": {
            "properties": {
                "maxBatchSize": {
                    "description": "Maximum number of JSON RPC requests to pack into a single batch",
                    "type": "number"
                },
                "maxBatchTime": {
                    "description": "Maximum time to wait before submitting a batch of JSON RPC requests",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "EthereumConfigSchema": {
            "properties": {
                "client": {
                    "$ref": "#/definitions/EthereumClientConfigSchema",
                    "description": "Ethereum client configuration"
                },
                "http": {
                    "$ref": "#/definitions/HttpTransportConfigSchema",
                    "description": "HTTP tansport configuration"
                },
                "network": {
                    "description": "Network name send as a field with every event and metric to HEC.\nEthlogger will attempt to automatically determine if not specified\nbut there are only a handful of known public networkIds associated\nwith particular networks (ethereum mainnet, ropsten, ...). This value\nwill allow consumers of data to distinguis between different networks\nin case multiple ethloggers are sending events from different networks.",
                    "type": "string"
                },
                "url": {
                    "description": "URL of JSON RPC endpoint",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FileOutputConfig": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "file"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HecConfigSchema": {
            "properties": {
                "defaultFields": {
                    "additionalProperties": {
                    },
                    "description": "Default set of fields to apply to all events and metrics sent with this HEC client",
                    "type": "object"
                },
                "defaultMetadata": {
                    "description": "Defaults for host, source, sourcetype and index. Can be overriden for each message",
                    "properties": {
                        "host": {
                            "type": "string"
                        },
                        "index": {
                            "type": "string"
                        },
                        "source": {
                            "type": "string"
                        },
                        "sourcetype": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "flushTime": {
                    "description": "Maximum number of milliseconds to wait before flushing the HEC message queue",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "gzip": {
                    "description": "Gzip compress the request body sent to HEC (Content-Encoding: gzip)",
                    "type": "boolean"
                },
                "maxQueueEntries": {
                    "description": "Maximum number of entries in the HEC message queue before flushing it",
                    "type": "number"
                },
                "maxQueueSize": {
                    "description": "Maximum number of bytes in the HEC message queue before flushing it",
                    "type": "number"
                },
                "maxRetries": {
                    "description": "Maximum number of attempts to send a batch to HEC. By default this there is no limit",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "Maximum number of sockets HEC will use (per host)",
                    "type": "number"
                },
                "multipleMetricFormatEnabled": {
                    "description": "Enable sending multipe metrics in a single message to HEC.\nSupported as of Splunk 8.0.0\nhttps://docs.splunk.com/Documentation/Splunk/8.0.0/Metrics/GetMetricsInOther#The_multiple-metric_JSON_format",
                    "type": "boolean"
                },
                "requestKeepAlive": {
                    "description": "Keep sockets to HEC open",
                    "type": "boolean"
                },
                "retryWaitTime": {
                    "anyOf": [
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "exponential-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "step": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "linear-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "description": "Wait time before retrying to send a (batch of) HEC messages"
                },
                "timeout": {
                    "description": "Number of milliseconds to wait before considereing an HTTP request as failed",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "token": {
                    "description": "The HEC token used to authenticate HTTP requests",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of HEC. If only the base URL is specified (path is omitted) then the default path will be used",
                    "type": "string"
                },
                "userAgent": {
                    "description": "User-agent header sent to HEC",
                    "type": "string"
                },
                "validateCertificate": {
                    "description": "If set to false, the HTTP client will ignore certificate errors (eg. when using self-signed certs)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HecOutputConfig": {
            "properties": {
                "metricsPrefix": {
                    "description": "A common prefix for all metrics emitted to Splunk",
                    "type": "string"
                },
                "sourcetypes": {
                    "description": "Sourcetypes to use for different kinds of events we send to Splunk",
                    "properties": {
                        "block": {
                            "type": "string"
                        },
                        "event": {
                            "type": "string"
                        },
                        "gethPeer": {
                            "type": "string"
                        },
                        "nodeInfo": {
                            "type": "string"
                        },
                        "nodeMetrics": {
                            "type": "string"
                        },
                        "pendingtx": {
                            "type": "string"
                        },
                        "quorumProtocol": {
                            "type": "string"
                        },
                        "transaction": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "hec"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HttpTransportConfigSchema": {
            "properties": {
                "maxSockets": {
                    "description": "Maximum number of sockets HEC will use (per host)",
                    "type": "number"
                },
                "requestKeepAlive": {
                    "description": "Keep sockets to JSON RPC open",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "Time before failing JSON RPC requests",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "validateCertificate": {
                    "description": "If set to false, the HTTP client will ignore certificate errors (eg. when using self-signed certs)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "InternalMetricsConfigSchema": {
            "properties": {
                "collectInterval": {
                    "description": "Interval in which to collect internal metrics",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "enabled": {
                    "description": "Specify `false` to disable internal metrics collection",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NodeInfoConfigSchema": {
            "properties": {
                "collectInterval": {
                    "description": "Interval in which to collect node info",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "enabled": {
                    "description": "Specify `false` to disable node info collection",
                    "type": "boolean"
                },
                "retryWaitTime": {
                    "anyOf": [
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "exponential-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "step": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "linear-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "description": "Wait time before retrying to collect node info after failure"
                }
            },
            "type": "object"
        },
        "NodeMetricsConfigSchema": {
            "properties": {
                "collectInterval": {
                    "description": "Interval in which to collect node metrics",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "enabled": {
                    "description": "Specify `false` to disable node metrics collection",
                    "type": "boolean"
                },
                "retryWaitTime": {
                    "anyOf": [
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "exponential-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "step": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "linear-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "description": "Wait time before retrying to collect node metrics after failure"
                }
            },
            "type": "object"
        },
        "Partial<HecConfigSchema>": {
            "properties": {
                "defaultFields": {
                    "additionalProperties": {
                    },
                    "description": "Default set of fields to apply to all events and metrics sent with this HEC client",
                    "type": "object"
                },
                "defaultMetadata": {
                    "description": "Defaults for host, source, sourcetype and index. Can be overriden for each message",
                    "properties": {
                        "host": {
                            "type": "string"
                        },
                        "index": {
                            "type": "string"
                        },
                        "source": {
                            "type": "string"
                        },
                        "sourcetype": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "flushTime": {
                    "description": "Maximum number of milliseconds to wait before flushing the HEC message queue",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "gzip": {
                    "description": "Gzip compress the request body sent to HEC (Content-Encoding: gzip)",
                    "type": "boolean"
                },
                "maxQueueEntries": {
                    "description": "Maximum number of entries in the HEC message queue before flushing it",
                    "type": "number"
                },
                "maxQueueSize": {
                    "description": "Maximum number of bytes in the HEC message queue before flushing it",
                    "type": "number"
                },
                "maxRetries": {
                    "description": "Maximum number of attempts to send a batch to HEC. By default this there is no limit",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "Maximum number of sockets HEC will use (per host)",
                    "type": "number"
                },
                "multipleMetricFormatEnabled": {
                    "description": "Enable sending multipe metrics in a single message to HEC.\nSupported as of Splunk 8.0.0\nhttps://docs.splunk.com/Documentation/Splunk/8.0.0/Metrics/GetMetricsInOther#The_multiple-metric_JSON_format",
                    "type": "boolean"
                },
                "requestKeepAlive": {
                    "description": "Keep sockets to HEC open",
                    "type": "boolean"
                },
                "retryWaitTime": {
                    "anyOf": [
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "exponential-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                },
                                "min": {
                                    "type": "number"
                                },
                                "step": {
                                    "type": "number"
                                },
                                "type": {
                                    "enum": [
                                        "linear-backoff"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "description": "Wait time before retrying to send a (batch of) HEC messages"
                },
                "timeout": {
                    "description": "Number of milliseconds to wait before considereing an HTTP request as failed",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "token": {
                    "description": "The HEC token used to authenticate HTTP requests",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of HEC. If only the base URL is specified (path is omitted) then the default path will be used",
                    "type": "string"
                },
                "userAgent": {
                    "description": "User-agent header sent to HEC",
                    "type": "string"
                },
                "validateCertificate": {
                    "description": "If set to false, the HTTP client will ignore certificate errors (eg. when using self-signed certs)",
                    "type": "boolean"
                }
            },
            "type": "object"
        }
    },
    "properties": {
        "abi": {
            "$ref": "#/definitions/AbiRepositoryConfigSchema",
            "description": "ABI repository configuration"
        },
        "blockWatcher": {
            "$ref": "#/definitions/BlockWatcherConfigSchema",
            "description": "Block watcher - the component monitoring the blocks"
        },
        "checkpoint": {
            "$ref": "#/definitions/CheckpointConfigSchema",
            "description": "Checkpoint configuration - how ethlogger keeps track of state between restarts"
        },
        "contractInfo": {
            "$ref": "#/definitions/ContractInfoConfigSchema",
            "description": "Contract info cache settings"
        },
        "eth": {
            "$ref": "#/definitions/EthereumConfigSchema",
            "description": "Ethereum node configuration"
        },
        "hec": {
            "description": "HTTP event collector",
            "properties": {
                "default": {
                    "$ref": "#/definitions/HecConfigSchema",
                    "description": "Base settings that apply to"
                },
                "events": {
                    "$ref": "#/definitions/Partial<HecConfigSchema>",
                    "description": "HEC settings for events sent to Splunk"
                },
                "internal": {
                    "$ref": "#/definitions/Partial<HecConfigSchema>",
                    "description": "HEC settings for internal metrics sent to Splunk"
                },
                "metrics": {
                    "$ref": "#/definitions/Partial<HecConfigSchema>",
                    "description": "HEC settings for metrics sent to Splunk"
                }
            },
            "type": "object"
        },
        "internalMetrics": {
            "$ref": "#/definitions/InternalMetricsConfigSchema",
            "description": "Settings for internal metrics collection"
        },
        "nodeInfo": {
            "$ref": "#/definitions/NodeInfoConfigSchema",
            "description": "Settings for the node info collector"
        },
        "nodeMetrics": {
            "$ref": "#/definitions/NodeMetricsConfigSchema",
            "description": "Settings for the node metrics collector"
        },
        "output": {
            "anyOf": [
                {
                    "$ref": "#/definitions/HecOutputConfig"
                },
                {
                    "$ref": "#/definitions/ConsoleOutputConfig"
                },
                {
                    "$ref": "#/definitions/FileOutputConfig"
                },
                {
                    "$ref": "#/definitions/DevNullOutputConfig"
                }
            ],
            "description": "Output configuration"
        }
    },
    "type": "object"
}

